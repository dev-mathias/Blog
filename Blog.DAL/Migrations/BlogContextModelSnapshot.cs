// <auto-generated />
using System;
using Blog.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Blog.DAL.Migrations
{
    [DbContext(typeof(BlogContext))]
    partial class BlogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Blog.Dal.ModelsEF.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Très bon article!",
                            Date = new DateTime(2023, 10, 10, 11, 52, 17, 531, DateTimeKind.Local).AddTicks(6382),
                            PostId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Merci pour ces informations.",
                            Date = new DateTime(2023, 10, 10, 11, 52, 17, 531, DateTimeKind.Local).AddTicks(6387),
                            PostId = 2,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Blog.Dal.ModelsEF.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Contenu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateDePublication")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdminId = 2,
                            Contenu = "L'écologie est essentielle pour...",
                            DateDePublication = new DateTime(2023, 10, 10, 11, 52, 17, 531, DateTimeKind.Local).AddTicks(6321),
                            ImageUrl = "image1.jpg",
                            Titre = "Les bienfaits de l'écologie"
                        },
                        new
                        {
                            Id = 2,
                            AdminId = 2,
                            Contenu = "La règle des trois R est...",
                            DateDePublication = new DateTime(2023, 10, 10, 11, 52, 17, 531, DateTimeKind.Local).AddTicks(6366),
                            ImageUrl = "image2.jpg",
                            Titre = "Réduire, Réutiliser, Recycler"
                        });
                });

            modelBuilder.Entity("Blog.Dal.ModelsEF.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "jd@example.com",
                            FirstName = "Jean",
                            Lastname = "Dupont",
                            Nickname = "JD",
                            Password = "123"
                        });
                });

            modelBuilder.Entity("Blog.Dal.ModelsEF.Admin", b =>
                {
                    b.HasBaseType("Blog.Dal.ModelsEF.User");

                    b.ToTable("Admins", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Email = "am@example.com",
                            FirstName = "Alice",
                            Lastname = "Martin",
                            Nickname = "AM",
                            Password = "456"
                        });
                });

            modelBuilder.Entity("Blog.Dal.ModelsEF.Comment", b =>
                {
                    b.HasOne("Blog.Dal.ModelsEF.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog.Dal.ModelsEF.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blog.Dal.ModelsEF.Post", b =>
                {
                    b.HasOne("Blog.Dal.ModelsEF.Admin", "Admin")
                        .WithMany("Posts")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Blog.Dal.ModelsEF.Admin", b =>
                {
                    b.HasOne("Blog.Dal.ModelsEF.User", null)
                        .WithOne()
                        .HasForeignKey("Blog.Dal.ModelsEF.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blog.Dal.ModelsEF.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Blog.Dal.ModelsEF.User", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Blog.Dal.ModelsEF.Admin", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
